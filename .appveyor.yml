version: "{build}"
os: Visual Studio 2019  # matches the GitHub workflow's "VS 2019" usage
platform: x64

# Adjust the config as needed (e.g., Release, Debug, etc.)
configuration: Release

# Environment variables to help mimic your GitHub Actions build
environment:
  CTEST_OUTPUT_ON_FAILURE: 1

  # Use the vcpkg toolchain file
  # (assuming vcpkg is installed in C:\tools\vcpkg)
  #CMAKE_TOOLCHAIN_FILE: -DCMAKE_TOOLCHAIN_FILE=C:\tools\vcpkg\scripts\buildsystems\vcpkg.cmake
  CMAKE_TOOLCHAIN_FILE: C:\tools\vcpkg\scripts\buildsystems\vcpkg.cmake

  # By default, Visual Studio 16 2019 is the generator
  CMAKE_GENERATOR: -G"Visual Studio 16 2019"

  # Use the x64 platform (like -DCMAKE_GENERATOR_PLATFORM=x64)
  CMAKE_GENERATOR_PLATFORM: -A x64

  # For C++17
  CMAKE_CXX_STANDARD: 17

  # Force clang++ (will be ignored if using default MSVC toolset unless you specify -T ClangCL)
  CC: clang
  CXX: clang++

  # Additional variables to match your GitHub workflow
  MACHINE_SPEED_FACTOR: 5.0
  OMPL_REGISTRATION: OFF
  OMPL_BUILD_DEMOS: OFF

  # Where you plan to install
  CMAKE_INSTALL_PREFIX: C:\projects\omplapp\install
  OMPL_PYTHON_INSTALL_DIR: C:\projects\omplapp\install\python

  # vcpkg triplet for x64-windows
  VCPKG_ARCH: x64-windows

cache:
  # Cache installed libraries to speed up subsequent builds
  - C:\tools\vcpkg\installed -> .appveyor.yml
  - C:\Users\appveyor\AppData\Local\vcpkg\archives -> .appveyor.yml

before_build:
  # 1) Ensure vcpkg is present and up-to-date
  - cmd: if not exist C:\tools\vcpkg ( git clone https://github.com/microsoft/vcpkg.git C:\tools\vcpkg )
  - cmd: cd C:\tools\vcpkg && git pull
  - cmd: cd C:\tools\vcpkg && bootstrap-vcpkg.bat

  # 2) Install the dependencies needed (like your GH workflow)
  # - cmd: vcpkg install boost-dynamic-bitset:%VCPKG_ARCH% || vcpkg install boost-dynamic-bitset:%VCPKG_ARCH%
  # - cmd: vcpkg install boost-filesystem:%VCPKG_ARCH%     || vcpkg install boost-filesystem:%VCPKG_ARCH%
  # - cmd: vcpkg install boost-graph:%VCPKG_ARCH%          || vcpkg install boost-graph:%VCPKG_ARCH%
  # - cmd: vcpkg install boost-odeint:%VCPKG_ARCH%         || vcpkg install boost-odeint:%VCPKG_ARCH%
  # - cmd: vcpkg install boost-program-options:%VCPKG_ARCH% || vcpkg install boost-program-options:%VCPKG_ARCH%
  # - cmd: vcpkg install boost-serialization:%VCPKG_ARCH%   || vcpkg install boost-serialization:%VCPKG_ARCH%
  # - cmd: vcpkg install boost-system:%VCPKG_ARCH%         || vcpkg install boost-system:%VCPKG_ARCH%
  # - cmd: vcpkg install boost-test:%VCPKG_ARCH%           || vcpkg install boost-test:%VCPKG_ARCH%
  # - cmd: vcpkg install eigen3:%VCPKG_ARCH%               || vcpkg install eigen3:%VCPKG_ARCH%
  # - cmd: vcpkg install flann:%VCPKG_ARCH%                || vcpkg install flann:%VCPKG_ARCH%
  # # add any other libs you need here...

  # # 3) Python dependencies
  # - cmd: python -m pip install --upgrade pip
  # - cmd: python -m pip install numpy flask celery pygccxml

  # 4) Fetch OMPL submodule
  # - cmd: git clone --depth=1 --branch=main https://github.com/ompl/ompl.git C:\projects\omplapp\ompl

  # 2) Manually create a build folder inside ompl (NOT in the parent)
  # - cmd: cd C:\projects\omplapp\ompl && mkdir build
  # - cmd: cd C:\projects\omplapp\ompl\build && cmake -G "Visual Studio 16 2019" -DCMAKE_BUILD_TYPE=Release ^ -DCMAKE_TOOLCHAIN_FILE=%CMAKE_TOOLCHAIN_FILE% ..

  #- cmd: git clone --depth=1 --branch=main https://github.com/ompl/ompl.git C:\projects\omplapp\ompl
  # - cmd: git submodule update --init --recursive

  # # 5) Create build directory and configure
  # - cmd: cd C:\projects\omplapp\ompl
  # - cmd: mkdir build
  # - cmd: cd build
  # # If you truly want clang in Visual Studio, you can add "-T ClangCL" below.
  # - cmd: cmake %CMAKE_GENERATOR% %CMAKE_GENERATOR_PLATFORM% ^
  #          -DCMAKE_BUILD_TYPE=%configuration% ^
  #          %CMAKE_TOOLCHAIN_FILE% ^
  #          -DOMPL_REGISTRATION=%OMPL_REGISTRATION% ^
  #          -DOMPL_BUILD_DEMOS=%OMPL_BUILD_DEMOS% ^
  #          -DMACHINE_SPEED_FACTOR=%MACHINE_SPEED_FACTOR% ^
  #          -DCMAKE_INSTALL_PREFIX=%CMAKE_INSTALL_PREFIX% ^
  #          -DOMPL_PYTHON_INSTALL_DIR=%OMPL_PYTHON_INSTALL_DIR% ^
  #          -DCMAKE_CXX_STANDARD=%CMAKE_CXX_STANDARD% ^
  #          -DCMAKE_C_COMPILER=%CC% ^
  #          -DCMAKE_CXX_COMPILER=%CXX% ^
  #          C:\projects\omplapp\ompl
  # - cmd: mkdir C:\projects\omplapp\build
  - cmd: >
      REM Ensure that C:\projects\omplapp actually has your code/CMakeLists.txt!
      mkdir C:\projects\omplapp\build
      && cd C:\projects\omplapp\build
      && cmake %CMAKE_GENERATOR% %CMAKE_GENERATOR_PLATFORM%
         -DCMAKE_BUILD_TYPE=%configuration%
         -DCMAKE_TOOLCHAIN_FILE=%CMAKE_TOOLCHAIN_FILE%
         -DCMAKE_CXX_STANDARD=%CMAKE_CXX_STANDARD%
         -DOMPL_REGISTRATION=%OMPL_REGISTRATION%
         -DOMPL_BUILD_DEMOS=%OMPL_BUILD_DEMOS%
         C:\projects\omplapp

build:
  project: C:\projects\omplapp\build\omplapp.sln
  # project: C:\projects\omplapp\ompl\build\ompl.sln
  parallel: true

test_script:
  # Run tests with ctest
  - cmd: ctest -C %configuration%

artifacts:
  - path: build\omplapp*.zip
