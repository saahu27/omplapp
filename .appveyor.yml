# AppVeyor file
# http://www.appveyor.com/docs/appveyor-yml

version: "{build}"
os: Visual Studio 2019  # Updated to VS 2019 for better C++17 support

clone_folder: C:\projects\omplapp
shallow_clone: true

platform: x64

environment:
  CTEST_OUTPUT_ON_FAILURE: 1
  CMAKE_TOOLCHAIN_FILE: -DCMAKE_TOOLCHAIN_FILE="C:\tools\vcpkg\scripts\buildsystems\vcpkg.cmake"
  CMAKE_GENERATOR: -G"Visual Studio 16 2019"  # Updated to VS 2019
  VCPKG_ARCH: x64-windows
  CMAKE_CXX_STANDARD: 17  # Enforce C++17
  CC: clang++
  CXX: clang++

cache:
  - C:\tools\vcpkg\installed -> .appveyor.yml
  - C:\Users\appveyor\AppData\Local\vcpkg\archives -> .appveyor.yml  # Cache vcpkg downloads

configuration: Release

before_build:
  # Check if vcpkg exists; if not, clone it
  - cmd: if not exist C:\tools\vcpkg ( git clone https://github.com/microsoft/vcpkg.git C:\tools\vcpkg )
  - cmd: cd C:\tools\vcpkg && git pull
  - cmd: cd C:\tools\vcpkg && bootstrap-vcpkg.bat
  - cmd: vcpkg update
  - cmd: vcpkg upgrade --no-dry-run

  # Install required dependencies
  - cmd: for /l %i in (1,1,3) do vcpkg install boost-filesystem[core]:x64-windows && if %errorlevel% == 0 exit /b 0
  - cmd: for /l %i in (1,1,3) do vcpkg install boost-program-options[core]:x64-windows && if %errorlevel% == 0 exit /b 0
  - cmd: for /l %i in (1,1,3) do vcpkg install boost-serialization[core]:x64-windows && if %errorlevel% == 0 exit /b 0
  - cmd: for /l %i in (1,1,3) do vcpkg install boost-system[core]:x64-windows && if %errorlevel% == 0 exit /b 0
  - cmd: for /l %i in (1,1,3) do vcpkg install boost-test[core]:x64-windows && if %errorlevel% == 0 exit /b 0
  - cmd: for /l %i in (1,1,3) do vcpkg install boost-ublas[core]:x64-windows && if %errorlevel% == 0 exit /b 0
  - cmd: for /l %i in (1,1,3) do vcpkg install boost-math[core]:x64-windows && if %errorlevel% == 0 exit /b 0
  - cmd: for /l %i in (1,1,3) do vcpkg install eigen3[core]:x64-windows && if %errorlevel% == 0 exit /b 0
  - cmd: for /l %i in (1,1,3) do vcpkg install fcl[core]:x64-windows && if %errorlevel% == 0 exit /b 0
  - cmd: for /l %i in (1,1,3) do vcpkg install assimp[core]:x64-windows && if %errorlevel% == 0 exit /b 0
  - cmd: for /l %i in (1,1,3) do vcpkg install octomap[core]:x64-windows && if %errorlevel% == 0 exit /b 0
  - cmd: for /l %i in (1,1,3) do vcpkg install triangle[core]:x64-windows && if %errorlevel% == 0 exit /b 0
  - cmd: for /l %i in (1,1,3) do vcpkg install ccd[core]:x64-windows && if %errorlevel% == 0 exit /b 0
  - cmd: for /l %i in (1,1,3) do vcpkg install pygccxml[core]:x64-windows && if %errorlevel% == 0 exit /b 0

  # Install Python dependencies for OMPL
  - cmd: python -m pip install --upgrade pip
  - cmd: python -m pip install numpy flask celery pygccxml

  # Clone OMPL source code
  - cmd: git clone -q --depth=1 --branch=main https://github.com/ompl/ompl.git C:\projects\omplapp\ompl
  - cmd: mkdir build
  - cmd: cd build

  # Configure with CMake (Enforce C++17)
  - cmd: cmake %CMAKE_GENERATOR% -DCMAKE_BUILD_TYPE=%configuration% %CMAKE_TOOLCHAIN_FILE% -DOMPL_REGISTRATION=OFF -DCMAKE_CXX_STANDARD=17 -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ..

build:
  project: C:\projects\omplapp\build\omplapp.sln
  parallel: true

after_build:
  - cmd: cmake --build . --config %configuration% --target package

test_script:
  - cmd: ctest -C %configuration%

artifacts:
  - path: 'build\omplapp*.zip'
